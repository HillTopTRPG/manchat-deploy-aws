AWSTemplateFormatVersion: 2010-09-09
Description: >-
  manchat
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

  # Lambda
  FunctionGetAllSampleStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: rest-api/get-all-sample/template.yaml
      Parameters:
        TableName: !GetAtt DynamoDbSampleStack.Outputs.TableRef

  FunctionGetByIdStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: rest-api/get-by-id/template.yaml
      Parameters:
        TableName: !GetAtt DynamoDbSampleStack.Outputs.TableRef

  FunctionPutItemStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: rest-api/put-item/template.yaml
      Parameters:
        TableName: !GetAtt DynamoDbSampleStack.Outputs.TableRef

  # API Gateway
  ApiRESTStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: rest-api/gateway/template.yaml
      Parameters:
        FunctionGetAllSampleArn: !GetAtt FunctionGetAllSampleStack.Outputs.FunctionArn
        FunctionGetByIdArn: !GetAtt FunctionGetByIdStack.Outputs.FunctionArn
        FunctionPutItemArn: !GetAtt FunctionPutItemStack.Outputs.FunctionArn

  # DynamoDB
  DynamoDbSampleStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: dynamo-db/sample/template.yaml

  # CloudFront
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # Managed-CachingDisabled
            Compress: true
            OriginRequestPolicyId: "b689b0a8-53d0-40ab-baf2-68738e2966ac" # Managed-AllViewerExceptHostHeader
            PathPattern: "/api/*"
            TargetOriginId: api
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # Managed-CachingDisabled
            Compress: true
            OriginRequestPolicyId: "b689b0a8-53d0-40ab-baf2-68738e2966ac" # Managed-AllViewerExceptHostHeader
            PathPattern: "/asset/*"
            TargetOriginId: asset
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCachingMinTTL: 5
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"
          - ErrorCachingMinTTL: 5
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
          Compress: true
          OriginRequestPolicyId: "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf" # Managed-CORS-S3Origin
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true
        Origins:
          - Id: api
            ConnectionAttempts: 3 # default
            ConnectionTimeout: 10 # seconds
            DomainName: !GetAtt ApiRESTStack.Outputs.DomainName
            OriginPath: /Prod
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
              OriginSSLProtocols:
                - "TLSv1.2"
          - Id: s3
            ConnectionAttempts: 3 # default
            ConnectionTimeout: 10 # seconds
            DomainName: !GetAtt StaticBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
          - Id: asset
            ConnectionAttempts: 3 # default
            ConnectionTimeout: 10 # seconds
            DomainName: !GetAtt RoomBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  CloudFrontOriginAccessControl:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties:
      OriginAccessControlConfig:
        Description: !Ref AWS::StackName
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # S3
  StaticBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !Sub 'manchat-${AWS::AccountId}-static'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      Tags:
        - Key: CloudFormationArn
          Value: !Sub 'manchat-${AWS::AccountId}-static'
  StaticBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${StaticBucket}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}

  RoomBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !Sub 'manchat-${AWS::AccountId}-room'
      Tags:
        - Key: CloudFormationArn
          Value: !Sub 'manchat-${AWS::AccountId}-room'
  RoomBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RoomBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${RoomBucket}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}

Outputs:
  CloudFrontDomainName:
    Description: Cloud Front DomainName
    Value: !Sub https://${CloudFrontDistribution.DomainName}
  RESTfulApiDirectUrl:
    Description: To call the RESTfull API by API Gateway.
    Value: !Sub ${ApiRESTStack.Outputs.ProdDataEndpoint}/api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true
